//codificador    
public static string Codificador(string txtCad)
    {
        string[] arr0;
        string[] arr1;
        string[] arr2;
        string[] arr3;
        string[] arr4;
        string ResuIni = "";
        string CaracterNum = "";
        string CaracterStr = "";
        string CadenaCarac = "";
        string CantIni = "";
        string txtLink = "";
        string strTexto1 = "";
        string strTexto2 = "";
        string txtLink1 = "";
        string CadIni = "";
        string strtxt = "";
        string strResp = "";
        string strEsp = "";
        string ResEsp = "";
        string strJunto = "";
        int i = 0;
        int ii = 0;
        int iicant = 0;
        int iipos = 0;
        int iiveces = 0;
        int iiCad = 0;
        int iiTexto1 = 0;
        int iiIni = 0;
        int iRes = 0;
        int iSeg = 0;
        int mIndex = 0;
        int txtPos2 = 0;

        int iMod = 0;
        int iModp = 0;
        iSeg = DateTime.Now.Second;
        if (iSeg == 0)
        {
            iSeg = 38;
        }
        //================================================================
        //cantidad de caracteres enviados a codificar osea lo que trae txtCad
        int iTam = 0;
        iTam = txtCad.Length;

        string strResu = null;
        string Caracter = null;
        iTam = txtCad.Length;
        for (iMod = 1; iMod <= iTam; iMod++)
        {
            strResu = "";
            strtxt = txtCad.Substring(iModp, 1);
            Caracter = ("},^,ç");
            iModp = iModp + 1;
            arr0 = Caracter.Split(new Char[] { ',' });
            Random rnd0 = new Random();
            while (strResu.Length < 1)
            {
                var mIndex0 = rnd0.Next(0, arr0.Length);

                strResu = arr0[mIndex0];
            }
            if (strtxt == " ")
            {
                strResp += strResu;
            }
            else
            {
                strResp += strtxt;
            }
        }

        txtCad = strResp;
        //'================================================================

        //============================================================

        //   for (iRes = 1; iRes <= iSeg; iRes++)
        // {
        //Cargamos la matriz con números y letras
        CaracterNum = ("3,4,5,6,7,8,9");
        arr1 = CaracterNum.Split(new Char[] { ',' });

        Random rnd1 = new Random();
        mIndex = rnd1.Next(0, arr1.Length);
        mIndex = Int32.Parse(arr1[mIndex]);
        //============================================================
        CaracterStr = ("1,2,3,4,5,6,7,8,9,0," +
                    "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z," +
                    "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z," +
                    "~,-,_,Ç,¦,æ,¥,],ƒ,£,«,¶,¢,±,µ");
        arr2 = CaracterStr.Split(new Char[] { ',' });
        iicant = (txtCad.Length * mIndex) * 2;
        if (iicant < 40)
        {
            iicant = 84;
        }
        strTexto1 = "";
        txtLink = txtCad;
        iipos = 0;
        iiveces = txtCad.Length;
        ii = 1;
        Random rnd2 = new Random();
        while (CadenaCarac.Length < iicant)
        {
            var mIindex2 = rnd2.Next(0, arr2.Length);
            strTexto2 = arr2[mIindex2];
            strTexto1 += strTexto2;
            if (ii == mIndex)
            {
                if (iipos < iiveces)
                {
                    txtLink1 = txtLink.Substring(iipos, 1);
                    iipos = iipos + 1;
                    CadenaCarac += strTexto2 + txtLink1;
                    ii = 0;
                }
                else
                {
                }
            }
            else
            {
                CadenaCarac += strTexto2;
            }
            ii = ii + 1;
        }
        iiCad = CadenaCarac.Length;
        iiTexto1 = strTexto1.Length;
        // }
        //CadenaCarac = CadenaCarac.Substring(1, CadenaCarac.Length-1);
        txtPos2 = mIndex + 1;
        int txtSeg2 = iSeg;
        string txtCadEsp = txtCad;
        int txtTamPal = iTam;
        for (i = 1; i <= iSeg; i++)
        {
            iiIni = 1;
            for (iiIni = 1; iiIni <= 2; iiIni++)
            {
                ResuIni = "";
                CadIni = ("a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"
                    + "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,"
                    + "~,-,_,Ç,¦,æ,¥,],ƒ,£,«,¶,¢,±,µ");
                arr3 = CadIni.Split(new Char[] { ',' });
                Random rnd3 = new Random();
                while (ResuIni.Length < mIndex)
                {
                    var mIindex3 = rnd3.Next(0, arr3.Length);

                    ResuIni = ResuIni + arr3[mIindex3];
                }
                if (iiIni == 1)
                {
                    int posle = mIndex + 1;
                    CantIni = ResuIni + posle;
                }
            }
        }


        strEsp = ("},^,ç");
        arr4 = strEsp.Split(new Char[] { ',' });
        Random rnd = new Random();
        int iEsp = 0;
        while (iEsp < mIndex)
        {
            var mIindex4 = rnd.Next(0, arr4.Length);

            ResEsp = arr4[mIindex4];
            iEsp = iEsp + 1;
        }
        var txtTotCad = CantIni.Length + ResuIni.Length + iTam + ResEsp.Length + CadenaCarac.Length;
        //return CantIni + ResuIni + iTam + ResEsp + CadenaCarac;
        return CantIni + ResuIni + iTam + ResEsp + CadenaCarac;

    }

//decodificador
    public static string Decode(string strdato)
    {
        string strMia = strdato;

        string txtCod = "";
        string strCad = "";
        string txtCad = "";
        string txtEsp = "";
        string strEsp = "";
        string txtDcod = "";
        string PosCad = "";
        string TamCad = "";
        string strMod = "";
        int ii = 1;
        int iii = 0;
        int iCont = 0;
        int i = 0;
        string iposl = "";
        string icantletra = "";
        double num;
        string candidate = "";
        string strposl = "no";
        double icant1 = txtCod.Length;
        txtCod = strMia;
        for (i = 0; i <= txtCod.Length; i++)
        {
            candidate = txtCod.Substring(i, 1);
            if (double.TryParse(candidate, out num))
            {
                if (strposl == "no")
                {
                    // It's a number!
                    strMod = strMod + candidate;
                    if (!string.IsNullOrEmpty(strMod))
                    {
                        PosCad = strMod;
                        iposl += candidate;
                    }
                }else if(strposl == "si")
                {
                    // It's a number!
                    strMod = strMod + candidate;
                    if (!string.IsNullOrEmpty(strMod))
                    {
                        PosCad = strMod;
                        icantletra += candidate;
                    }
                }
            }
            else
            {
                if(iposl != "")
                {
                    strposl = "si";
                }
                txtEsp = candidate;
                switch ((txtEsp))
                {
                    case  "}":
                        strEsp = txtEsp;
                        ii = i;
                        break; // TODO: might not be correct. Was : Exit For
                    case "^":
                        strEsp = txtEsp;
                        ii = i;
                        break; // TODO: might not be correct. Was : Exit For
                    case "ç":
                        strEsp = txtEsp;
                        ii = i;
                        break; // TODO: might not be correct. Was : Exit For
                }
            }
            if(strEsp != "")
            {
                break;
            }
        }
        PosCad = strMod.Substring(0, 1);

        //int iPosCad = (Int32.Parse(PosCad));
        int iPosCad = (Int32.Parse(iposl));
        //TamCad = strMod.Substring(2, strMod.Length);
        //int iTamCad = (Int32.Parse(TamCad));
        int iTamCad = (Int32.Parse(icantletra));

        txtCad = txtCod.Substring(0, ii+1);
        txtCod = txtCod.Replace(txtCad, "");
        strCad = "";
        iCont = iPosCad;
        for (iii = 1; iii <= iTamCad; iii++)
        {
            strCad += txtCod.Substring(iPosCad-1, 1);
            iPosCad = iPosCad + iCont;
        }
        iii = 0;
        ii = 0;
        for (iii = 1; iii <= iTamCad; iii++)
        {
            txtDcod = strCad.Substring(ii, 1);
            switch ((txtDcod))
            {
                case "(":
                    strCad = strCad.Replace(txtDcod, " ");
                    break;
                case "}":
                    strCad = strCad.Replace(txtDcod, " ");
                    break;
                case "^":
                    strCad = strCad.Replace(txtDcod, " ");
                    break;
                case "ç":
                    strCad = strCad.Replace(txtDcod, " ");
                    break;
            }
            ii = ii + 1;
        }
        return strCad;

    }
